
package compi2.valitationsej.analysis;

import java_cup.runtime.*;
import java.util.*;

/*-----------------------------------------------------------
  CUP Specification for the Parser Class
  -----------------------------------------------------------*/
parser code {:
    //fields
    Lexer lex;
    private List<String> syntaxErrors;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIENDO LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal            FIN, COMA, CORCHETE_L, CORCHETE_R, PARENTESIS_L, PARENTESIS_R, MAS, POR, IGUAL, 
                    BTRUE, BFALSE, BOOL_I, INT_I, FLOAT_I, DEC_I, CADENA;
terminal            UMINUS, VECTORS;
terminal String     ID, STRING_LIT;
terminal Float      FLOAT_LIT;
terminal Integer    INTEGER_LIT;

/* Non-terminals */
non terminal        s, declaration, type, dec_type, value, asignation, expresion;
non terminal Integer vect;

/* Precedences */
precedence left MAS, POR, UMINUS;

/* The grammar */
start with s;
s ::= declaration asignation;


declaration ::= type value FIN declaration
    | type value FIN
    ;

type ::= dec_type vect
    ;

dec_type ::= INT_I
    | FLOAT_I
    | CADENA
    | BOOL_I
    | DEC_I 
    ;

vect ::= CORCHETE_L expresion CORCHETE_R
    | /*empty*/
    ;

value ::= value COMA ID
    | ID
    ;



asignation ::= ID IGUAL expresion FIN asignation
    | ID IGUAL expresion FIN
    ;

expresion ::= expresion MAS expresion
    | expresion POR expresion
    %prec UMINUS
    | PARENTESIS_L  expresion PARENTESIS_R
    | INTEGER_LIT
    | FLOAT_LIT
    | STRING_LIT
    | BTRUE
    | BFALSE
    | ID vect
    ;