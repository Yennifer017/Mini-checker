
package compi2.valitationsej.analysis;

import java_cup.runtime.*;
import java.util.*;

import java.util.*;
import compi2.valitationsej.ast.*;
import compi2.valitationsej.components.SymbolT;
import compi2.valitationsej.components.Type;
import compi2.valitationsej.semantic.Valitator;
/*-----------------------------------------------------------
  CUP Specification for the Parser Class
  -----------------------------------------------------------*/
parser code {:
    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private List<String> semanticErrors;
    private HashMap<String, SymbolT> st;
    private Valitator valitator;

    //conect the parser with the lexer
    public Parser(Lexer lex){
        super(lex);
        syntaxErrors = new LinkedList<>();
        semanticErrors = new LinkedList<>();
        st = new HashMap<>();
        valitator = new Valitator();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    public List<String> getSemanticErrors(){
        return this.semanticErrors;
    }
    
    /*SOBREESCRIBIENDO LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        syntaxErrors.add(mss);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal            FIN, COMA, CORCHETE_L, CORCHETE_R, PARENTESIS_L, PARENTESIS_R, MAS, POR, IGUAL, 
                    BTRUE, BFALSE, BOOL_I, INT_I, DEC_I, CADENA;
terminal            UMINUS, VECTORS;
terminal String     ID, STRING_LIT;
terminal Float      FLOAT_LIT;
terminal Integer    INTEGER_LIT;

/* Non-terminals */
non terminal        s;
non terminal Expresion expresion, vect;
non terminal Type dec_type;
non terminal Declaration type, declaration;
non terminal ArrayList<String> ident;
non terminal Asignation asignation;

/* Precedences */
precedence left MAS, POR, UMINUS;

/* The grammar */
start with s;
s ::= declaration asignation;


declaration ::= declaration:D type:d ident:l FIN
                    {:
                        d.setIds(l);
                        //RESULT = d;
                        valitator.insertIntoST(d, st, semanticErrors);
                    :}
    | type:d ident:l FIN    
                    {:
                        d.setIds(l);
                        /*RESULT = d;*/
                        valitator.insertIntoST(d, st, semanticErrors);
                    :}
    ;

type ::= dec_type:t vect:e  {: RESULT = new Declaration(t, e); :}
    ;

dec_type ::= INT_I  {: RESULT = Type.ENTERO; :}
    | CADENA        {: RESULT = Type.CADENA; :}
    | BOOL_I        {: RESULT = Type.BOOLEANO; :}
    | DEC_I         {: RESULT = Type.DECIMAL; :}
    ;

vect ::= CORCHETE_L expresion:e CORCHETE_R    
                    {: 
                        Expresion expresion = new Expresion(Type.VECTOR);
                        expresion.setLeftExp(e);
                        RESULT = expresion;
                    :}
    | /*empty*/     {: RESULT = new Expresion(Type.ID); :}
    ;

ident ::= ident:l COMA ID:id
                    {:
                        l.add(id);
                        RESULT = l;
                    :}
    | ID:id         {: 
                        ArrayList<String> ids = new ArrayList<>();
                        ids.add(id);
                        RESULT = ids;
                    :}
    ;



asignation ::= asignation ID:id vect:vE IGUAL expresion:e FIN
                    {:
                        vE.setSymbol(id);
                        Asignation asign = new Asignation(vE, e);
                        RESULT = asign;
                        valitator.validate(asign, st, semanticErrors);
                    :}
    | ID:id vect:vE IGUAL expresion:e FIN 
                    {:
                        vE.setSymbol(id);
                        Asignation asign = new Asignation(vE, e);
                        RESULT = asign;
                        valitator.validate(asign, st, semanticErrors);
                    :}
    ;

expresion ::= expresion:e1 MAS expresion:e2 
                    {: 
                        RESULT = new Expresion(Operation.SUMA, e2, e1);
                    :}
    | expresion:e1 POR expresion:e2
                    {: 
                        RESULT = new Expresion(Operation.MULTIPLICACION, e2, e1);
                    :}
    %prec UMINUS
    | PARENTESIS_L expresion:e PARENTESIS_R     {: RESULT = e; :}
    | INTEGER_LIT   {: RESULT = new Expresion(Type.ENTERO);   :}
    | FLOAT_LIT     {: RESULT = new Expresion(Type.DECIMAL);   :}
    | STRING_LIT    {: RESULT = new Expresion(Type.CADENA);   :}
    | BTRUE         {: RESULT = new Expresion(Type.BOOLEANO);   :}
    | BFALSE        {: RESULT = new Expresion(Type.BOOLEANO);   :}
    | ID:id vect:vE {: vE.setSymbol(id); RESULT = vE; :}
    ;